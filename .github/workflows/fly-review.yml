name: Deploy Review App
on:
  # Run this workflow on every PR event. Existing review apps will be updated when the PR is updated.
  pull_request:
    types: [opened, reopened, synchronize, closed]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  # Set these to your Fly.io organization and preferred region.
  FLY_REGION: iad
  FLY_ORG: personal

jobs:
  review_app:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    # Only run one deployment at a time per PR.
    concurrency:
      group: pr-${{ github.event.number }}

    # Deploying apps with this "review" environment allows the URL for the app to be displayed in the PR UI.
    # Feel free to change the name of this environment.
    environment:
      name: pr-${{ github.event.number }}
      # The script in the `deploy` sets the URL output for each review app.
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Get code
        uses: actions/checkout@v4

      - name: Create .npmrc for GitHub Packages
        run: |
          echo "@nypublicradio:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Deploy PR app to Fly.io
        id: deploy
        uses: superfly/fly-pr-review-apps@1.5.0
        with:
          secrets: |
            ALGOLIA_ADMIN_API_KEY=${{ secrets.ALGOLIA_ADMIN_API_KEY }}
            VALID_TOKEN=${{ secrets.VALID_TOKEN }}
          build_args: |
            ENV=${{ env.ENV }}
            ALGOLIA_APP_ID=${{ secrets.ALGOLIA_APP_ID }}
            ALGOLIA_API_KEY=${{ secrets.ALGOLIA_API_KEY }}
            ALGOLIA_RADIOLAB_INDEX=${{ env.ALGOLIA_RADIOLAB_INDEX }}
            API_URL=${{ env.API_URL }}
            HTL_IS_TESTING=${{ env.HTL_IS_TESTING }}
            HTL_CSS=${{ env.HTL_CSS }}
            HTL_JS=${{ env.HTL_JS }}
            GA_MEASUREMENT_ID=${{ secrets.GA_MEASUREMENT_ID }}
            GTM_ID=${{ secrets.GTM_ID }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            ADMIN_CMS_ROOT=${{ env.ADMIN_CMS_ROOT }}
            SIMPLECAST_URL=${{ env.SIMPLECAST_URL }}

      - name: Send Slack notification
        if: ${{ github.event.action != 'closed' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#pull-requests'
          SLACK_COLOR: 'good'
          SLACK_ICON_EMOJI: ':rocket:'
          SLACK_TITLE: 'Review App Deployed'
          SLACK_MESSAGE: |
            **Pull Request:** <${{ github.event.pull_request.html_url }}|#${{ github.event.number }}: ${{ github.event.pull_request.title }}>
            **Review App URL:** <${{ steps.deploy.outputs.url }}|${{ steps.deploy.outputs.url }}>
            **Branch:** ${{ github.head_ref }}
            **Author:** ${{ github.event.pull_request.user.login }}

      - name: Clean up GitHub environment
        if: ${{ github.event.action == 'closed' }}
        run: |
          # First, deactivate all deployments in the environment
          gh api -X GET /repos/${{ github.repository }}/deployments \
            --jq '.[] | select(.environment == "pr-${{ github.event.number }}") | .id' \
            | xargs -I {} gh api -X POST /repos/${{ github.repository }}/deployments/{}/statuses \
            --field state=inactive --field description="PR closed" || true
          
          # Then delete the environment
          gh api -X DELETE /repos/${{ github.repository }}/environments/pr-${{ github.event.number }} || true
        env:
          GH_TOKEN: ${{ secrets.DELETE_ENV_PAT }}